/*
1. Important Structures Used in Socket Programming
a.
	struct sockaddr {
		unsigned short sa_family; // address family, AF_xxx
		char sa_data[14]; // 14 bytes of protocol address
	};
b. 
	struct sockaddr_in {
		short int sin_family; // Address family
		unsigned short int sin_port; // Port number
		struct in_addr sin_addr; // Internet address
		unsigned char sin_zero[8]; // Same size as struct sockaddr
	};
c. Internet address (a structure for historical reasons)
	struct in_addr {
		unsigned long s_addr; // that’s a 32-bit long, or 4 bytes
	};
2. Important methods to be used
	htons() – "Host to Network Short"
	htonl() – "Host to Network Long"
	ntohs() – "Network to Host Short"
	ntohl() – "Network to Host Long"
	ina.sin_addr.s_addr = inet_addr("10.12.110.57"); // converts an IP address in numbers-and-dots notation into an unsigned long
	int inet_aton("10.12.110.57", &(my_addr.sin_addr)); // converts an IP address, ascii to network, returns 0 on error and non-zero on success
	char* inet_ntoa() // netwotk to numbers and dot notation, network to ascii
	
3. System Calls

a. socket()–Get the File Descriptor!
	int socket(int domain, int type, int protocol);
		domain = AF_INET
		type = SOCK_STREAM or SOCK_DGRAM
		protcol = 0 to automatically select correct protocol
		returns a socket descriptor, -1 on error

b. bind()–What port am I on?
	int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
		sockfd = file descriptor returned by socket()
		my_addr is a pointer to a struct sockaddr that contains information about your address, namely, port and IP address
		addrlen can be set to sizeof(struct sockaddr)
		returns -1 on error

c. connect()–Hey, you!
	int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
		sockfd = file descriptor returned by socket()
		serv_addr is a struct sockaddr containing the destination port and IP address
		addrlen can be set to sizeof(struct sockaddr)
		return -1 on error

d. listen()–Will somebody please call me?
	int listen(int sockfd, int backlog);
		sockfd = file descriptor returned by socket()
		backlog = number of connections allowed on the incoming queue
		return -1 on error

e. accept()–"Thank you for calling the port"
	int accept(int sockfd, void *addr, int *addrlen);
		sockfd = file descriptor returned by socket()
		addr will usually be a pointer to a local struct sockaddr_in. This is where the information about the incoming connection will go
		addrlen = sizeof(struct sockaddr_in)
		returns file descriptior for new connection, returns -1 on error

f. send() and recv()–Talk to me, baby!
	int send(int sockfd, const void *msg, int len, int flags);
		sockfd is the socket descriptor you want to send data to (whether it’s the one returned by socket() or the one you got with accept().)
		msg is a pointer to the data you want to send
		len is the length of that data in bytes
		flags = 0
		returns the number of bytes actually sent out, or -1 on error

	int recv(int sockfd, void *buf, int len, unsigned int flags);
		buf is the buffer to read the information into
		len is the maximum length of the buffer
		flags = 0
		returns the number of bytes actually read into the buffer, or -1 on error
		recv() can return 0, the remote side has closed the connection on you

g. close() and shutdown()–Get outta my face!
	close(sockfd);
		This will prevent any more reads and writes to the socket
*/